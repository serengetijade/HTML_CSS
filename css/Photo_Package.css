#intro.h1 {
    font-variant: small-caps;
    text-shadow: 3px 3px 8px rgba(0,0,0,.5);
    text-align: center;
}
/*SCALE A PHOTO TO FIT IT'S PARENT CONTAINER*/
/*height: 100%;   these three properties scale an image to fit it's parent container*/
/*width: 100%;    these three properties scale an image to fit it's parent container*/
/*object-fit: cover; these three properties scale an image to fit it's parent container*/

/*PHOTO CONTAINER*/
.flex-container {
    display: -webkit-flex;
    display: flex; /*Displays an element as a block-level flex container, allowing child elements to move within it*/
    flex-wrap: wrap; /*Make the flexible items wrap if necessary*/
    margin: 0px auto; /*Centers this class on the page*/
    width: 90%; /*Width of this class 'photo-contianer'*/
    padding: 10px;
    border-radius: 8px;
    background-color: rgba(255, 255, 230,1);
    box-shadow: 3px 3px 10px 0 rgba(0,0,0,.5), -2px -2px 10px salmon;
}
p {
    font-weight: 300;
    line-height: 30px;
    padding-bottom: 15px; 
}
.photo-container {
    text-align: center;
    margin: 15px auto;
    width: 300px;
    height: 169px;
}
.photo {
    position: relative; /*Relative=The element is positioned relative to its normal position*/
    margin-bottom: 2em;
    overflow: hidden; /*Any overflow content is clipped. Overflow specifies whether to clip content or to add scrollbars when an element's content is too big to fit in a specified area.*/
    line-height: 0;
    border-radius: 8px;
    border: 1px solid gray;
    background-color: rgb(191, 238, 130);
    box-shadow: 2px 2px 10px rgba(0,0,0,.7);
}
.photo-container img {
    max-width: 100%;
    width: 300px;
    height: 169px;
}
.photo-overlay{
    position: absolute;
    color: #fff;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    padding-left: 20px;
    padding-right: 20px;
    justify-content: center; /*For centering inside 'display: flex;'  containers*/
    align-items: center; /*Center the alignments for all the items of the flexible <div> element*/
    background: rgba(0,0,0,.4);
}
.white-head{
    color: #c9bdaa;
    margin-top: 5%;
    line-height: 30px;
    padding-bottom: 20px;
}
/*Photo overlay transition*/
.photo-overlay {
    opacity: 0;
    transition: opacity .1s; /*property and duration*/
    border-radius: 10px;
    cursor: pointer;
}
.photo-overlay p {
    width: 100%;
    height: 100%;
    color: #fff;
}
.photo-overlay:hover {
    opacity: 1;
}
.photo img {
    transition: transform .5s; /*The animation*/
    transform-origin: 50% 50%; /*"Dead on" transform*/
}
.photo:hover img {
    transform: scale(1.1); 
}
/*END Photo overlay transition*/
/*END PHOTO CONTAINER*/


/*Flex Box Rows & Columns Layout*/
.row {
    display: flex; /*Displays an element as a block-level flex container, allowing child elements to move within it*/
    display: -webkit-flex;
    flex-wrap: wrap; /*specifies whether the flexible items should wrap or not*/
    margin: 10px;
    padding: 20px;
    overflow: hidden; /*Any overflow content is clipped. Overflow specifies whether to clip content or to add scrollbars when an element's content is too big to fit in a specified area.*/
    height: fit-content;
    background-color: bisque;
    border-radius: 10px;
    justify-content: center; /*aligns the flexible container's items*/
    position: relative; 
}
.row:after {
	content: ""; 
    display: table; 
    clear: both; /*Clear any other elements from floating on the left or the right of an element*/
}
.column1 {
    width: 50%; /*Default value is width: fit-content;*/
    text-align: center;
}
.column1:after {
        content: ""; 
        display: table; 
        clear: both; /*Clear any other elements from floating on the left or the right of an element*/
}
.column2 {
    width: 50%; /*Default value is width: fit-content;*/
    text-align: center;
}
.photo2 img {
    height:20vw;
    border-radius: 10px;
}
/*END Flex Box Rows & Columns Layout*/


/*------------PHOTO OVERLAY CHANGE BACKGROUND----------*/
.photo-container-change {
    position: relative; /*The element is positioned relative to its normal position*/
    margin: 20px auto;
    padding: 20px;
    text-align: center;
    width: fit-content;
    background-color: lightgreen;
    border: 5px solid green;
    border-radius: 10px;
    box-shadow: inset 3px 3px 15px rgba(0,0,0,.5);
}
.photo-container-change img {
    width: 100%;
}
.photo-change {
    position: absolute; /*The element is positioned relative to its first positioned (not static) ancestor*/
    top: 0;     /*Remove default spacing*/
    bottom: 0;  /*Remove default spacing*/
    left: 0;    /*Remove default spacing*/
    right: 0;   /*Remove default spacing*/
    width: 100%;/*Fill the entire element width*/
    height: 100%;/*Fill the entire element height*/
    transition: .5s ease;
    background-image: url("../images/madcat.jpg");
    background-size: cover;
    background-repeat: no-repeat;
    opacity: 0; /*Makes the element 'invisible'*/
}
.photo-change:hover {
    opacity: 1; /*Makes the element 'visible'*/
}
.photo-change-text {
    position: absolute; /*The element is positioned relative to its first positioned (not static) ancestor*/ 
    top: 50%; /*If position: absolute; or position: fixed; - the top property sets the top edge of an element to a unit above/below the top edge of its nearest positioned ancestor.*/
    transform: translate(-50%, -50%); /*Centers element 'dead on' by moving child elements -50%(left) of width and -50%(up) of height*/
    /*Together, the above three properties and values (position, top, transform) center vertically any child elements*/
    right: 10%; /*Position text and overrides transform x value of -50%*/
    color: orange;
}
/*END PHOTO-OVERLAY CHANGE BACKGROUND*/